<!--
-->
<launch>

  # Bag filename
  <arg name="bag_file" default="/media/chur/2028AD7828AD4E1A/Dataset/2017-09-21_full_track_surface/siar_2017-09-21-12-17-39_gt.bag"/>
  <arg name="play_bag" default="true"/>
  <arg name="rgbd_odom" default="true"/>
  <arg name="rate" default="1"/>
  <arg name="initial_x" default="98.9293441772" />
  <arg name="initial_y" default="-195.20526123" />
  <arg name="initial_a" default="-0.562" />
  <arg name="detector" default="false"/>
  <arg name="vis" default="true"/>
  <arg name="ground_truth" default="(find manhole_detector)/test/input_vector_2017-01-17-11_ground_truth"/>
  <arg name="ground_truth_out" default="(find manhole_detector)/test/input_vector_2017-01-17-11_ground_truth_out.txt"/>
  <arg name="odom_x_mod" default="0.4" />
  <arg name="odom_y_mod" default="0.4" />
  <arg name="odom_a_mod" default="0.2" />
  <arg name="odom_a_noise" default="0.075" />
  <arg name="yaw_estimator" default="false" />
  <arg name="min_particles" default="300"/>
  <arg name="max_particles" default="400"/>
  <arg name="angleDev" default="0.04"/>
  <arg name="graph_file" default="gis_graph_reduced"/>
  <arg name="base_frame_id" default="base_link"/>
  <arg name="odom_frame_id" default="odom"/>
  <arg name="emit_tf_base" default="false"/>
  <arg name="cnn_model" default="model.29-1.00-0.98.hdf5"/>
  
  # Use simulation time fro TFs
  <param name="use_sim_time" value="true" />
  
  <arg name="camera" default="/up"/>
  <arg name="start" default="0"/>
  
  <arg name="trajectory_file" default="$(find amcl_sewer)/traj.txt"/>

  # Bag file
  <node name="bag_player" type="play" pkg="rosbag" args="$(arg bag_file) --clock -s $(arg start) -r $(arg rate)" if="$(arg play_bag)" output="screen">
    <remap from="/tf" to ="/tf_unused"/>
  </node>
  
  # Uncompress images and depth
  <node name="republish_img" type="republish" pkg="image_transport" output="screen" args="compressed in:=/front/rgb/image_raw raw out:=/front/rgb/image_raw"/>
  <node name="republish_depth" type="republish" pkg="image_transport" output="screen" args="compressedDepth in:=/front/depth_registered/image_raw raw out:=/front/depth_registered/image_raw"/>
  <node name="republish_depth_2" type="republish" pkg="image_transport" output="screen" args="compressedDepth in:=/up/depth_registered/image_raw raw out:=/up/depth_registered/image_raw"/>
    
  # Launch RGB-D odom
  <node name="rgbd_odom_node" type="rgbd_odom_node" pkg="rgbd_odom" if="$(arg rgbd_odom)" output="screen">
    <param name="camera_topic" value="/front" />
    <param name="tf_topic_out" value="/rgbd_odom/transform" />
    <param name="max_features" value="1000" />
    <param name="flow_threshold" value="10" />
    <param name="min_matches" value="50" />
    <param name="odom_frame_id" value="$(arg odom_frame_id)" />
    <param name="base_frame_id" value="$(arg base_frame_id)" />
    <param name="publish_image" value="true" />
    <param name="publish_point_cloud" value="true" />
    <param name="use_sba" value="false" />
    <param name="type_sba" value="1" />         # 0: MOTIONSTRUCTURE, 1: MOTION, 2: STRUCTURE (cvsba)
    <param name="max_keyframes" value="10" />
    <param name="use_imu" value="true" />
    <param name="imu_topic" value="/arduimu_v3/imu" />
    <param name="apply_downsampling" value="false" />
    <param name="pc_downsampling" value="0.1" />
    <param name="apply_crop" value="true" />
    <param name="pc_crop_dist" value="7.0" />
    <param name="apply_outlier" value="false" />
    <param name="pc_outlier_radius" value="0.4" />
    <param name="pc_outlier_neighbors" value="10" />
    <param name="ground_height_topic" value="/ground_estimator_node/ground_height" />
    <param name="ground_alpha" value="0.8" />
  </node>
  
  <node pkg="odom_to_tf" type="odom_to_tf.py" name="odom_to_tf" unless="$(arg rgbd_odom)">
    <param name="base_link" value="$(arg base_frame_id)"/>
    <param name="odometry_frame" value="$(arg odom_frame_id)"/>
  </node>

  
<!--   <node name="amcl_node" type="amcl_node" pkg="amcl_sewer" launch-prefix="xterm -e gdb - -args" > for DEBUG-->
<node name="amcl_node" type="amcl_node" pkg="amcl_sewer">
    <param name="rate" value="10.0" />
    <param name="base_frame_id" value="$(arg base_frame_id)" />
    <param name="odom_frame_id" value="$(arg odom_frame_id)" />
    <param name="global_frame_id" value="map" />
    <param name="fused" value="false"/>

    <param name="min_particles" value="$(arg min_particles)" />
    <param name="max_particles" value="$(arg max_particles)" />

    <param name="angular_rate" value="0.4"/>
    
    <param name="odom_x_mod" value="$(arg odom_x_mod)" />
    <param name="odom_y_mod" value="$(arg odom_y_mod)" />
    <param name="odom_a_mod" value="$(arg odom_a_mod)" />
    <param name="odom_a_noise" value="$(arg odom_a_noise)" />
    
    <param name="resample_interval" value="0" />
    
    <param name="update_min_d" value="0.6" />
    <param name="update_min_a" value="0.3" />
    
    <param name="initial_x" value="$(arg initial_x)" />
    <param name="initial_y" value="$(arg initial_y)" />
    <param name="initial_a" value="$(arg initial_a)" />
    
    <param name="initial_x_dev" value="0.3" />
    <param name="initial_y_dev" value="0.3" />
    <param name="initial_a_dev" value="0.1" />
    
    <param name="edgeDev" value="0.3"/>
    <param name="manholeThres" value="0.00075"/>
    <param name="manholeDev" value="0.4" />
    <param name="min_manhole_detected" value="2"/>
    <param name="forkDev" value="0.35"/>
    <param name="fork_dist" value="10.0"/>
    <param name="angleDev" value="$(arg angleDev)"/>
    <param name="angular_weight" value="0.2"/>
    
    <param name="sewer_graph_file" value="$(find sewer_graph)/test/$(arg graph_file)"/>
    
    <remap from="/amcl_sewer_node/initial_pose" to="/initialpose"/>
    
    <param name="initialize" value="true"/>
    
    <param name="traj_file" value="$(arg trajectory_file)"/>
    
  </node>
    
  <node name="vis" type="rviz" pkg="rviz" args="-d $(find amcl_sewer)/launch/amcl_pure.rviz" if="$(arg vis)"/>
  
  <node name="cnn_laber" type="cnn_detector.py" pkg="manhole_detector" args="/up $(find manhole_detector)/test/$(arg cnn_model)" if="$(arg detector)">
    <param name="thres" value="0.5"/>
  </node>

  <node name="yaw_estimator" type="test_wall_detector" pkg="wall_detector" if="$(arg yaw_estimator)">
   <param name="camera" value="/front"/>
   <param name="link_1" value="$(arg base_frame_id)"/>
   <param name="link_2" value="front_depth_optical_frame"/>
   <param name="vertical_threshold" value="0.85"/>
  </node>
  
  <node name="ground_truth" type="ground_truth.py" pkg="manhole_detector" args="$(arg camera) $(arg ground_truth) $(arg ground_truth_out) $(arg trajectory_file_python) " output="screen" >
    <param name="base_frame_id" value="$(arg base_frame_id)" />
    <remap from="/ground_truth" to="/not_used"/>
  </node>
  
  <node name="tf_global" type="static_transform_publisher" pkg="tf" args="0 0 0 0 0 0 map world 10"/>
  <node name="tf_base_frame" type="static_transform_publisher" pkg="tf" args="0 0 0 0 0 0 $(arg base_frame_id) front_link 10" if="$(arg emit_tf_base)"/>

</launch>	
